class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        if(src == dst)return 0;
        int ans = INT_MAX;
        queue<vector<int>> q;
        unordered_map<int,vector<vector<int>>> mp;
        for(int i=0;i<flights.size();i++){
            mp[flights[i][0]].push_back({flights[i][1], flights[i][2]});
        }
        vector<int>vis(n,INT_MAX);
        vis[src]=0;
        q.push({src, 0, -1});
        while(!q.empty()){
            vector<int> te(q.front().begin(),q.front().end());
            q.pop();
            if(te[0]==dst){
                ans=min(te[1], ans);
                continue;
            }
            if(te[2]>k)continue;
            int u=te[0];
            vector<vector<int>> &v=mp[u];
            for(int i=0;i<v.size();i++){
                if(te[2]+1<=k && te[1]+v[i][1]<vis[v[i][0]]){
                    q.push({v[i][0],te[1]+v[i][1],te[2]+1});
                    vis[v[i][0]]=te[1]+v[i][1];
                }
            }
        }
        return ans==INT_MAX?-1:ans;
    }
};
