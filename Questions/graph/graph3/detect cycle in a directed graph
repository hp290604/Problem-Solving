class Solution {
    static boolean fun(HashMap<Integer,HashSet<Integer>> h,int cur,boolean[] b){
        if(b[cur]==true){
            // System.out.println(h.get(cur));
            return true;
        }
        b[cur]=true;
        boolean f=false;
        List<Integer> list=new ArrayList<>(h.get(cur));
        for(int i=0;i<h.get(cur).size();i++){
            f|=fun(h,list.get(i),b);
            
        }
        b[cur]=false;
        return f;
    }
    private boolean isCyclicUtil(int i, boolean[] visited,
                                 boolean[] recStack,ArrayList<ArrayList<Integer>> adj)
    {
        if (recStack[i])
            return true;
 
        if (visited[i])
            return false;
 
        visited[i] = true;
 
        recStack[i] = true;
        List<Integer> children = adj.get(i);
 
        for (Integer c : children)
            if (isCyclicUtil(c, visited, recStack,adj))
                return true;
 
        recStack[i] = false;
 
        return false;
    }
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean[] visited=new boolean[V];
        boolean[] rec=new boolean[V];
        for(int i=0;i<V;i++){
            if (isCyclicUtil(i, visited, rec, adj))
                return true;
        }
        return false;
    }
}
