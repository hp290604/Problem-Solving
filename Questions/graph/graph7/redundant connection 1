class Solution {
    static int findParent(int[] parent,int u,int count){
        // if(count>parent.length)return Integer.MAX_VALUE;
        if(parent[u]==u)return u;
        return findParent(parent,parent[u],count+1);
    }
    static void union(int[] parent,int pu,int pv,int[] rank){
        pu=parent[pu];
        pv=parent[pv];
        if(pu!=pv){
            if(rank[pu]<=rank[pv]){
                parent[pu]=pv;
                rank[pv]+=rank[pu];
            }
            else{
                parent[pv]=pu;
                rank[pu]+=rank[pv];
            }
        }
        else{
            parent[pv]=pu;
            rank[pu]+=rank[pv];
        }
        
    }
    public int[] findRedundantConnection(int[][] e) {
        int[] ans=new int[2];
        int[] parent=new int[e.length+1];
        int[] rank=new int[e.length+1];
        Arrays.fill(rank,1);
        for(int i=0;i<e.length+1;i++){
            parent[i]=i;
        }
        for(int[] it:e){
            int intU=findParent(parent,it[0],0);
            int intV=findParent(parent,it[1],0);
            
            if(intU!=intV){
                union(parent,intU,intV,rank);
            }
            else ans=it;
            // System.out.println(intU+" "+intV);
        }
        // for(int i=0;i<parent.length;i++){
        //     System.out.print(parent[i]+" ");
        // }
        return ans;
    }
}
