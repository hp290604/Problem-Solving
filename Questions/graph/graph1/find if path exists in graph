class Solution {
    public boolean validPath(int n, int[][] edges, int source, int destination) {
        if(source==destination)return true;
        if(edges.length==0)return false;
        HashMap<Integer,HashSet<Integer>> h=new HashMap<>();
        for(int i=0;i<edges.length;i++){
            h.put(edges[i][0],new HashSet<>());
            h.put(edges[i][1],new HashSet<>());
        }
        boolean[] b=new boolean[n];
        for(int i=0;i<edges.length;i++){
            h.get(edges[i][0]).add(edges[i][1]);
            h.get(edges[i][1]).add(edges[i][0]);
            b[edges[i][0]]=true;
            b[edges[i][1]]=true;
        }
        for(int i=0;i<n;i++){
            b[i]=!b[i];
        }
        Queue<Integer> q=new LinkedList<>();
        q.addAll(new LinkedList<>(h.get(source)));
        b[source]=true;
        while(!q.isEmpty()){
            int x=q.poll();
            if(x==destination)return true;
            if(b[x]==false){
                b[x]=true;
                q.addAll(new LinkedList<>(h.get(x)));
            }
        }
        // System.out.println(h);
        return false;
    }
}
