class Solution {
    static int max = Integer.MAX_VALUE;

    public int findShortestCycle(int n, int[][] e) {
        HashMap<Integer, List<Integer>> mp = new HashMap<>();
        for (int i = 0; i < e.length; i++) {
            mp.computeIfAbsent(e[i][0], k -> new LinkedList<>()).add(e[i][1]);
            mp.computeIfAbsent(e[i][1], k -> new LinkedList<>()).add(e[i][0]);
        }
        int ans = max;
        for (int start = 0; start < n; start++) {
            int[] dis = new int[n];
            Arrays.fill(dis, max);
            Queue<int[]> q = new LinkedList<>();
            q.offer(new int[] { start, -1 });
            dis[start] = 0;
            while (!q.isEmpty()) {
                int[] t = q.poll();
                if (mp.get(t[0]) == null)
                    continue;
                for (int nei = 0; nei < mp.get(t[0]).size(); nei++) {
                    if (dis[mp.get(t[0]).get(nei)] == max) {
                        dis[mp.get(t[0]).get(nei)] = dis[t[0]] + 1;
                        q.offer(new int[] { mp.get(t[0]).get(nei), t[0] });
                    } else if (mp.get(t[0]).get(nei) != t[1]) {
                        ans = Math.min(ans, dis[t[0]] + dis[mp.get(t[0]).get(nei)] + 1);
                    }
                }
            }
        }
        return ans == max ? -1 : ans;
    }
}
