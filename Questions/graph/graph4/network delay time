class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<int> v(n+1,INT_MAX);
        
        vector<bool> vis(n+1,false);
        v[k]=0;
        vector<vector<vector<int>>> adj(n);
        for(int i=0;i<=n;i++){
            adj.push_back({});
        }
        
        for(int i=0;i<times.size();i++){
            adj[times[i][0]].push_back({times[i][1], times[i][2]});
        }
        queue<int> q;
        q.push(k);
        while(!q.empty()){
            int temp=q.front();
            q.pop();
            if(vis[temp])continue;
            vis[temp]=true;
            int time=v[temp];
            for(vector<int> nei:adj[temp]){
                if(time+nei[1]<v[nei[0]]){
                    v[nei[0]]=time+nei[1];
                }
                q.push(nei[0]);
            }
        }
        int maxi=0;
        for(int i=1;i<v.size();i++){
            cout<<v[i]<<" ";
            maxi=max(v[i],maxi);
        }
        cout<<endl;
        return maxi==INT_MAX?-1:maxi;
    }
};
