/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    static String ns;
    static List<TreeNode> l1;
    static List<TreeNode> l2;
    static void fun(TreeNode root,int s,int e,List<TreeNode> l){
        if(root==null)return;
        l.add(root);
        // System.out.println(l);
        if(root.val==s){
            l1=new ArrayList<>(l);
            // return;
        }
        if(root.val==e){
            l2=new ArrayList<>(l);
            // return;
        }
        
        fun(root.left,s,e,l);
        fun(root.right,s,e,l);
        l.remove(l.size()-1);
    }
    static void f(TreeNode root,int e,String s){
        if(root==null)return;
        if(root.val==e){
            ns=s;
            return;
        }
        f(root.left,e,s+"L");
        f(root.right,e,s+"R");
    }
    public String getDirections(TreeNode root, int s, int e) {
        l1=new ArrayList<>();
        ns="";
        l2=new ArrayList<>();
        String st="";
        TreeNode ptr;
        fun(root,s,e,new ArrayList<>());
        ptr=l1.get(l1.size()-1);
        int i,j;
        for(i=0,j=0;i<l1.size() && j<l2.size();){
            if(l1.get(i)==l2.get(j)){
                i++;
                j++;
                ptr=l1.get(i-1);
            }
            else break;
        }
        System.out.println(ptr);
        System.out.println(l1);
        
        
        if(l1.contains(l2.get(l2.size()-1))){
            i=l1.indexOf(l2.get(l2.size()-1));
            for(j=1+i;j<l1.size();j++)st+="U";
            return st;
        }
        f(l1.get(i-1),e,"");
        int k=l1.size()-1;
        while(k>=0 && l1.get(k)!=l2.get(j-1))k--;
        
        // System.out.println(k);
        for(i=l1.size()-1;i>=0 && i!=k;i--){
            st+="U";
        }
        return st+ns;
    }
}
