/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        Queue<TreeNode> q=new LinkedList<>();
        if(root==null)return "";
        String s="";
        q.offer(root);
        while(q.size()!=0){
            TreeNode qq=q.poll();
            
            if(qq!=null)q.offer(qq.left);
            // else s+="N"+",";
            if(qq!=null)q.offer(qq.right);
            // else s+="N"+",";
            if(qq!=null)s+=qq.val+",";
            else s+="N,";
        }
        // System.out.println(s);
        return s;
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data.length()==0)return null;
        String[] d=data.split(",");
        // System.out.println(d[0]);
        TreeNode head=null;
        Queue<TreeNode> q=new LinkedList<>();
        Queue<Integer> qi=new LinkedList<>();
        head=new TreeNode(Integer.valueOf(d[0]));
        // System.out.println(head);
        q.offer(head);
        qi.offer(0);
        while(!q.isEmpty()){
            int i=qi.poll();
            TreeNode ptr=q.poll();
            if(2*i+1<d.length && !d[2*i+1].equals("N")){
                qi.offer(2*i+1);
                ptr.left=new TreeNode(Integer.valueOf(d[2*i+1]));
                q.offer(ptr.left);
            }
            if(2*i+2<d.length && !d[2*i+2].equals("N")){
                qi.offer(2*i+2);
                ptr.right=new TreeNode(Integer.valueOf(d[2*i+2]));
                q.offer(ptr.right);
            }
            // System.out.println();
        }
        // for(int i)
        
        if(data.length()==0)return null;
        
        return head;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));
