/************************************************************

 Following is the Binary Tree node structure:

 class TreeNode {
     int data;
     TreeNode left;
     TreeNode right;
     TreeNode(int data) {
         this.data = data;
         this.left = null;
         this.right = null;
     }
 }

 ************************************************************/

import java.util.List;
import java.util.*;
public class Solution {
    static void f(TreeNode root,List<Integer> list){
        if(root==null)return;
        if(root.left!=null){
            list.add(root.data);
            f(root.left,list);
        }
        else if(root.right!=null){
            list.add(root.data);
            f(root.right,list);
        }
    }
    static void fu(TreeNode root,List<Integer> list){
        if(root==null)return;
        if(root.left==null && root.right==null){
            list.add(root.data);
        }
        fu(root.left,list);
        fu(root.right,list);
    }
    static void fun(TreeNode root,List<Integer> list){
        if(root==null)return;
        if(root.right!=null){
            fun(root.right,list);
            list.add(root.data);
        }
        else if(root.left!=null){
            fun(root.left,list);
            list.add(root.data);
        }
    }
    public static List<Integer> traverseBoundary(TreeNode root){
        ArrayList<Integer> list=new ArrayList<>();
        ArrayList<Integer> li=new ArrayList<>();
        list.add(root.data);
        f(root.left,list);
        fu(root,list);
        fun(root.right,list);
        return list;
    }
}
/*

// import java.util.List;32 20 31 38 22 19 18 33 12 44 41 10 27 -1 37 -1 7 -1 -1 -1 -1 43 -1 1 -1 -1 23 -1 -1 -1 -1 -1 -1 21 29 30 -1 5 -1 -1 -1 -1 -1 -1 -1 

import java.util.*;
public class Solution {
    static List<Integer> list;
    static List<Integer> l;
    static List<Integer> ll;
    static void f3(TreeNode root){
        if(root==null)return;
        if(root.left==null && root.right==null){
            list.add(root.data);

        }
        f3(root.left);
        f3(root.right);
    }
    static void f1(TreeNode root,int c){
        if(root==null)return;
        if(l.size()==c)l.add(root.data);
        else l.set(c,root.data);
        if(root.left==null &&root.right==null)l.remove(l.size()-1);
        // System.out.println(l);
        f1(root.right,c+1);
        f1(root.left,c+1);

    }
    // static void f2(TreeNode root,int c){
    //     if(root==null)return;
        
    //     if(ll.size()==c){
    //         ll.add(root.data);
    //     }
    //     else ll.set(c,root.data);
    //     if(root.left==null && root.right==null)ll.remove(ll.size()-1);
    //     f2(root.left,c+1);
    //     f2(root.right,c+1);
    // }
   static void f2(TreeNode root,int c){
        if(root==null)return;
        if(ll.size()==c)ll.add(root.data);
        else ll.set(c,root.data);
        if(root.left==null &&root.right==null)ll.remove(ll.size()-1);
        // System.out.println(l);
        f2(root.left,c+1);
        f2(root.right,c+1);
        

    }
    public static List<Integer> traverseBoundary(TreeNode root){
        // Write your code here.
        list=new ArrayList<>();
        l=new ArrayList<>();
        ll=new ArrayList<>();
        // l.add(0,root.data);
        f1(root.left,0);
        f2(root.right,0);
        l.add(0,root.data);
        
        f3(root);
        HashSet<Integer> hash=new HashSet<>(list);
        // System.out.println(hash);
        // List<Integer> listNew=new ArrayList<>();
        for(int i=0;i<l.size();i++){
            if(hash.contains(l.get(i))){
                list.remove(i);
                i--;
            }
        }
        l.addAll(list);
        for(int i=ll.size()-1;i>=0;i--)l.add(ll.get(i));
        System.out.println(l+"\n"+list+"\n"+ll);
        return l;
    }
}
*/
