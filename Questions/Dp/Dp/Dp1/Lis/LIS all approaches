//RECURSION SOLUTION TO LIS
/*
class Solution {
    static int max=0;
    static void LISRecursion(int[] nums,int i,int curMax,int count){
        if(i>=nums.length){
            max=Math.max(count,max);
            return;
        }
        LISRecursion(nums,i+1,curMax,count);
        if(curMax<nums[i]){
            curMax=nums[i];
            LISRecursion(nums,i+1,curMax,count+1);
        }
        
    }
    public int lengthOfLIS(int[] nums) {
        max=0;
        LISRecursion(nums,0,Integer.MIN_VALUE,0);
        return max;
    }
}
*/

// LIS USING BINARY SEARCH
/*
class Solution {
    public int lengthOfLIS(int[] nums) {
        List<Integer> ans=new ArrayList<>();
        ans.add(nums[0]);
        for(int i=1;i<nums.length;i++){
            if(nums[i]>ans.get(ans.size()-1)){
                ans.add(nums[i]);
            }
            else{
                int low=0,high=ans.size()-1;
                int idx=-1;
                while(low<=high){
                    int mid=low+(high-low)/2;
                    if(ans.get(mid)>=nums[i]){
                        idx=mid;
                        high=mid-1;
                    }
                    else low=mid+1;
                }
                ans.set(idx,nums[i]);
            }
        }
        return ans.size();
    }
}
*/
// BOTTOM UP APPROACH TO LIS
/*
class Solution {
    public int lengthOfLIS(int[] nums) {
        int max=0;
        int[] dp=new int[nums.length];
        Arrays.fill(dp,1);
        for(int i=1;i<nums.length;i++){
            for(int j=0;j<i;j++){
                if(nums[i]>nums[j] && dp[i]<dp[j]+1){
                    dp[i]=dp[j]+1;
                }
            }
        }
        for(int i=0;i<dp.length;i++){
            max=Math.max(dp[i],max);
        }
        return max;
    }
}
*/
