class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        List<Integer> list=new ArrayList<>();
        int i=0,j=0;
        for( i=0,j=0;i<nums1.length && j<nums2.length;){
            if(nums1[i]<nums2[j]){
                list.add(nums1[i++]);
            }
            else list.add(nums2[j++]);
        }
        while(i<nums1.length){
            list.add(nums1[i++]);
        }
        while(j<nums2.length){
            list.add(nums2[j++]);
        }
        System.out.println(list);
        if((nums1.length+nums2.length)%2!=0)return list.get(list.size()/2);
        // System.out.println((list.get((nums1.length+nums2.length)/2-1)+list.get((nums1.length+nums2.length)/2)));
        double d=(double)((list.get((nums1.length+nums2.length)/2-1)+list.get((nums1.length+nums2.length)/2)));
        System.out.println(d);
        return d/2;
        // int l=Math.min(nums1[0],nums1[1]);.0
        // int h=Math.max(nums1[nums1.length-1],nums2[nums2.length-1]);
        // int ans=0;
        // while(l<=h){
        //     int mid=l+(h-l)/2;
        //     int count=0;
        //     for(int i=0;i<nums1.length;i++){
        //         if(nums1[i]>mid)break;
        //         count++;
        //     }
        //     for(int i=0;i<nums2.length;i++){
        //         if(nums2[i]>mid)break;
        //         count++;
        //     }
        //     if(count<(nums1.length+nums2.length)/2){
        //         l=mid+1;
        //     }
        //     else if(count>(nums1.length+nums2.length)/2){
        //         h=mid-1;
        //     }
        //     else{
        //         ans=mid;
        //         l=mid+1;
        //     }
        // }
        // return ans;
    }
}
